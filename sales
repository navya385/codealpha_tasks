# 📦 Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

# 🧼 Load and clean the data
df = pd.read_csv(r"C:\Users\likki\OneDrive\Desktop\html\sales.csv")  # Adjust path if needed
df.drop_duplicates(inplace=True)
df.dropna(inplace=True)

# 🧠 Standardize column names
df.columns = [col.strip().replace(" ", "_") for col in df.columns]

# 🔍 Inspect column names to identify categorical features
print("Columns:", df.columns.tolist())
print(df.head())

# 🔄 Encode categorical variables (adjust column names if needed)
categorical_cols = df.select_dtypes(include='object').columns.tolist()
df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

# 📊 Normalize numerical features
scaler = StandardScaler()
if 'Advertising_Spend' in df.columns:
    df[['Advertising_Spend']] = scaler.fit_transform(df[['Advertising_Spend']])

# 🎯 Feature selection
X = df.drop('Sales', axis=1)
y = df['Sales']

# 📈 Train regression model
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# 📊 Evaluate model
print("R² Score:", r2_score(y_test, y_pred))
import numpy as np
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print("RMSE:", rmse)

# 🔍 Advertising impact analysis
if 'Advertising_Spend' in df.columns:
    plt.figure(figsize=(10,6))
    sns.regplot(x=df['Advertising_Spend'], y=df['Sales'])
    plt.title("Impact of Advertising Spend on Sales")
    plt.xlabel("Advertising Spend (scaled)")
    plt.ylabel("Sales")
    plt.grid(True)
    plt.show()

# 📌 Feature importance
coefficients = pd.Series(model.coef_, index=X.columns)
plt.figure(figsize=(10,6))
coefficients.sort_values().plot(kind='barh', color='teal')
plt.title("Feature Impact on Predicted Sales")
plt.xlabel("Coefficient Value")
plt.grid(True)
plt.show()

# 📈 Optional: Time Series Forecasting (if 'Date' column exists)
if 'Date' in df.columns:
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    df_ts = df[['Date', 'Sales']].dropna()
    df_ts.set_index('Date', inplace=True)
    df_ts = df_ts.resample('M').sum()

    from statsmodels.tsa.holtwinters import ExponentialSmoothing
    model_ts = ExponentialSmoothing(df_ts['Sales'], seasonal='add', seasonal_periods=12)
    fit_ts = model_ts.fit()
    forecast = fit_ts.forecast(6)

    plt.figure(figsize=(12,6))
    df_ts['Sales'].plot(label='Historical Sales')
    forecast.plot(label='Forecast', linestyle='--')
    plt.title("Sales Forecast (Next 6 Months)")
    plt.legend()
    plt.grid(True)
    plt.show()
